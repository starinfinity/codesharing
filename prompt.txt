You are an expert Python developer specializing in Flask web applications and background task scheduling. You possess deep knowledge of cron expressions, database interactions (specifically Oracle), and secure server configuration management. Your task is to create two Python Flask applications that work in tandem to provide an automated task scheduler and management system. One application will be a web interface for managing tasks and server configurations. The other will be a background scheduler that executes tasks based on cron expressions and server configurations. Application 1: Task Management Web Application Goal: Create a Flask web application with the following features: Pages: Home: Displays trends of job statuses (failed, running, success, paused) using visual aids (e.g., charts). Use dummy data to initialize the visual aids. Create Task: A form to add new tasks with the following fields: Task Name (text field) Cron Expression (text field) Server Name (dropdown populated from the server_config.json file) File Path (text field) File Pattern (text field) Execute Command (text field) Execute Server Name (dropdown populated from the server_config.json file) State (dropdown with options: paused, unpaused. Default: unpaused) Show Task: Displays all created tasks in a table format with the following columns: Task Name, Cron Expression, Server Name, File Path, File Pattern, Execute Command, Execute Server Name, State. Includes options to pause or unpause individual tasks. Create Server Config: A form to add new server configurations with the following fields: Server Name (text field - acts as the key in server_config.json) Hostname (text field) Username (text field) Password (text field) Functionality: Implement routes for each page. Implement form handling for creating tasks and server configurations. Store task data in an Oracle database. The table should include fields for: id, cron_expression, task_name, server_name, file_path, file_pattern, execute_command, execute_server_name, state. Implement functionality to pause/unpause tasks by updating the 'state' field in the Oracle database. Implement a server_config.json file to store server configuration details. The file should have the following structure: { "[Server Name]": { "hostname": "[Hostname]", "username": "[Username]", "password": "[Password]" } } Implement functionality to read from and write to the server_config.json file. Application 2: Task Scheduler Goal: Create a background process that runs continuously and executes tasks based on cron expressions. Functionality: Fetch task details from the Oracle database every 60 seconds. Include: id, cron_expression, task_name, server_name, file_path, file_pattern, execute_command, execute_server_name, state. Check the cron expression of each unpaused task every 30 seconds. Use the cron expression to determine if a task should be executed. If a task should be executed: Read server configuration details from the server_config.json file based on the 'server_name' from the task details. Connect to the server specified in 'server_name' using the retrieved server configuration. Check for the 'file_pattern' at the specified 'file_path' on the server. If the file pattern is found: Read server configuration details from the server_config.json file based on the 'execute_server_name' from the task details. Connect to the server specified in 'execute_server_name' using the retrieved server configuration. Execute the 'execute_command' on the 'execute_server_name' server. Log the success or failure of the task execution, including timestamps and relevant details. Error Handling: Implement robust error handling to catch exceptions during database operations, server connections, file system operations, and command executions. Log all errors with detailed information for debugging purposes. Security: Store passwords securely in the server_config.json file (consider encryption). Sanitize inputs to prevent SQL injection and command injection vulnerabilities. Output Requirements: Provide well-commented Python code for both Flask applications. Include a README file with instructions on how to set up the applications (including database configuration) and run them. Specify any required Python packages in a requirements.txt file. Provide example data for the server_config.json file. Tone and Style: The code should be clean, well-structured, and easy to understand. Prioritize security and error handling. Use clear and concise comments to explain the code's functionality. Adhere to Python coding best practices. Assume the target audience is a system administrator with experience in Python and Flask.
